/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DareDropContractInterface extends utils.Interface {
  functions: {
    "ASSET()": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "dare(uint256)": FunctionFragment;
    "darePaymentValue(uint256)": FunctionFragment;
    "dares(uint256)": FunctionFragment;
    "drop(uint256)": FunctionFragment;
    "dropCut()": FunctionFragment;
    "emergencyChangeLockStatus()": FunctionFragment;
    "gameId()": FunctionFragment;
    "games(uint256)": FunctionFragment;
    "getPoolBalance()": FunctionFragment;
    "getRewards()": FunctionFragment;
    "houseCut()": FunctionFragment;
    "lock()": FunctionFragment;
    "owner()": FunctionFragment;
    "randomizer()": FunctionFragment;
    "randomizerCallback(uint256,bytes32)": FunctionFragment;
    "refund()": FunctionFragment;
    "setDropCut(uint8)": FunctionFragment;
    "setHouseCut(uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCallbackGasLimit(uint256)": FunctionFragment;
    "userBalance(address,uint256)": FunctionFragment;
    "userToLastCallback(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ASSET"
      | "claimRewards"
      | "dare"
      | "darePaymentValue"
      | "dares"
      | "drop"
      | "dropCut"
      | "emergencyChangeLockStatus"
      | "gameId"
      | "games"
      | "getPoolBalance"
      | "getRewards"
      | "houseCut"
      | "lock"
      | "owner"
      | "randomizer"
      | "randomizerCallback"
      | "refund"
      | "setDropCut"
      | "setHouseCut"
      | "transferOwnership"
      | "updateCallbackGasLimit"
      | "userBalance"
      | "userToLastCallback"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ASSET", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dare",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "darePaymentValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dares",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "drop",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "dropCut", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyChangeLockStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "games",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "houseCut", values?: undefined): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomizerCallback",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDropCut",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHouseCut",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCallbackGasLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userToLastCallback",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "ASSET", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "darePaymentValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dropCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyChangeLockStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "houseCut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "randomizer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomizerCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDropCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHouseCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToLastCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "DareAttempted(address,uint256)": EventFragment;
    "DareResult(address,uint256,uint256,bool)": EventFragment;
    "Drop(address,uint256)": EventFragment;
    "GameCompleted(uint256)": EventFragment;
    "LockStatusUpdated(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Refund(address,uint256,uint256)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "UpdatedGasLimit(uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DareAttempted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DareResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Drop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedGasLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DareAttemptedEventObject {
  user: string;
  wager: BigNumber;
}
export type DareAttemptedEvent = TypedEvent<
  [string, BigNumber],
  DareAttemptedEventObject
>;

export type DareAttemptedEventFilter = TypedEventFilter<DareAttemptedEvent>;

export interface DareResultEventObject {
  player: string;
  id: BigNumber;
  wager: BigNumber;
  result: boolean;
}
export type DareResultEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  DareResultEventObject
>;

export type DareResultEventFilter = TypedEventFilter<DareResultEvent>;

export interface DropEventObject {
  user: string;
  amount: BigNumber;
}
export type DropEvent = TypedEvent<[string, BigNumber], DropEventObject>;

export type DropEventFilter = TypedEventFilter<DropEvent>;

export interface GameCompletedEventObject {
  gameId: BigNumber;
}
export type GameCompletedEvent = TypedEvent<
  [BigNumber],
  GameCompletedEventObject
>;

export type GameCompletedEventFilter = TypedEventFilter<GameCompletedEvent>;

export interface LockStatusUpdatedEventObject {
  lockStatus: number;
}
export type LockStatusUpdatedEvent = TypedEvent<
  [number],
  LockStatusUpdatedEventObject
>;

export type LockStatusUpdatedEventFilter =
  TypedEventFilter<LockStatusUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  user: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RefundEventObject {
  player: string;
  refundAmount: BigNumber;
  id: BigNumber;
}
export type RefundEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RefundEventObject
>;

export type RefundEventFilter = TypedEventFilter<RefundEvent>;

export interface RewardsClaimedEventObject {
  user: string;
  rewardAmount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface UpdatedGasLimitEventObject {
  gasLimit: BigNumber;
}
export type UpdatedGasLimitEvent = TypedEvent<
  [BigNumber],
  UpdatedGasLimitEventObject
>;

export type UpdatedGasLimitEventFilter = TypedEventFilter<UpdatedGasLimitEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface DareDropContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DareDropContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ASSET(overrides?: CallOverrides): Promise<[string]>;

    claimRewards(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dare(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    darePaymentValue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dares(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, BigNumber] & {
        wager: BigNumber;
        player: string;
        result: boolean;
        seed: BigNumber;
      }
    >;

    drop(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dropCut(overrides?: CallOverrides): Promise<[number]>;

    emergencyChangeLockStatus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gameId(overrides?: CallOverrides): Promise<[BigNumber]>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        rewards: BigNumber;
        poolBalance: BigNumber;
        isGameComplete: boolean;
      }
    >;

    getPoolBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    houseCut(overrides?: CallOverrides): Promise<[number]>;

    lock(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    randomizer(overrides?: CallOverrides): Promise<[string]>;

    randomizerCallback(
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDropCut(
      _dropCut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHouseCut(
      _houseCut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCallbackGasLimit(
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userToLastCallback(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ASSET(overrides?: CallOverrides): Promise<string>;

  claimRewards(
    _gameId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dare(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  darePaymentValue(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dares(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, boolean, BigNumber] & {
      wager: BigNumber;
      player: string;
      result: boolean;
      seed: BigNumber;
    }
  >;

  drop(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dropCut(overrides?: CallOverrides): Promise<number>;

  emergencyChangeLockStatus(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gameId(overrides?: CallOverrides): Promise<BigNumber>;

  games(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      rewards: BigNumber;
      poolBalance: BigNumber;
      isGameComplete: boolean;
    }
  >;

  getPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRewards(overrides?: CallOverrides): Promise<BigNumber>;

  houseCut(overrides?: CallOverrides): Promise<number>;

  lock(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  randomizer(overrides?: CallOverrides): Promise<string>;

  randomizerCallback(
    _id: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refund(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDropCut(
    _dropCut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHouseCut(
    _houseCut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCallbackGasLimit(
    gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userBalance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userToLastCallback(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ASSET(overrides?: CallOverrides): Promise<string>;

    claimRewards(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dare(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    darePaymentValue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dares(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, BigNumber] & {
        wager: BigNumber;
        player: string;
        result: boolean;
        seed: BigNumber;
      }
    >;

    drop(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dropCut(overrides?: CallOverrides): Promise<number>;

    emergencyChangeLockStatus(overrides?: CallOverrides): Promise<void>;

    gameId(overrides?: CallOverrides): Promise<BigNumber>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        rewards: BigNumber;
        poolBalance: BigNumber;
        isGameComplete: boolean;
      }
    >;

    getPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(overrides?: CallOverrides): Promise<BigNumber>;

    houseCut(overrides?: CallOverrides): Promise<number>;

    lock(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    randomizer(overrides?: CallOverrides): Promise<string>;

    randomizerCallback(
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(overrides?: CallOverrides): Promise<void>;

    setDropCut(
      _dropCut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHouseCut(
      _houseCut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCallbackGasLimit(
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToLastCallback(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DareAttempted(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      wager?: null
    ): DareAttemptedEventFilter;
    DareAttempted(
      user?: PromiseOrValue<string> | null,
      wager?: null
    ): DareAttemptedEventFilter;

    "DareResult(address,uint256,uint256,bool)"(
      player?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      wager?: null,
      result?: PromiseOrValue<boolean> | null
    ): DareResultEventFilter;
    DareResult(
      player?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      wager?: null,
      result?: PromiseOrValue<boolean> | null
    ): DareResultEventFilter;

    "Drop(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DropEventFilter;
    Drop(user?: PromiseOrValue<string> | null, amount?: null): DropEventFilter;

    "GameCompleted(uint256)"(
      gameId?: PromiseOrValue<BigNumberish> | null
    ): GameCompletedEventFilter;
    GameCompleted(
      gameId?: PromiseOrValue<BigNumberish> | null
    ): GameCompletedEventFilter;

    "LockStatusUpdated(uint8)"(
      lockStatus?: PromiseOrValue<BigNumberish> | null
    ): LockStatusUpdatedEventFilter;
    LockStatusUpdated(
      lockStatus?: PromiseOrValue<BigNumberish> | null
    ): LockStatusUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Refund(address,uint256,uint256)"(
      player?: PromiseOrValue<string> | null,
      refundAmount?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): RefundEventFilter;
    Refund(
      player?: PromiseOrValue<string> | null,
      refundAmount?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): RefundEventFilter;

    "RewardsClaimed(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      user?: PromiseOrValue<string> | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;

    "UpdatedGasLimit(uint256)"(gasLimit?: null): UpdatedGasLimitEventFilter;
    UpdatedGasLimit(gasLimit?: null): UpdatedGasLimitEventFilter;

    "Withdraw(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    ASSET(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dare(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    darePaymentValue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dares(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drop(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dropCut(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyChangeLockStatus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gameId(overrides?: CallOverrides): Promise<BigNumber>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(overrides?: CallOverrides): Promise<BigNumber>;

    houseCut(overrides?: CallOverrides): Promise<BigNumber>;

    lock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    randomizer(overrides?: CallOverrides): Promise<BigNumber>;

    randomizerCallback(
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDropCut(
      _dropCut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHouseCut(
      _houseCut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCallbackGasLimit(
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToLastCallback(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ASSET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dare(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    darePaymentValue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dares(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drop(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dropCut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyChangeLockStatus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gameId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    houseCut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomizerCallback(
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDropCut(
      _dropCut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHouseCut(
      _houseCut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCallbackGasLimit(
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToLastCallback(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
